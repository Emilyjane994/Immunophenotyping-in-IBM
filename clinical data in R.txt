# install.packages("ggplot2")
library(ggplot2)
library(reshape)
library(gridExtra)
library(cowplot)
library(ggplot2)
library(ggstatsplot)
library(dplyr)



######perfom basic stats on clusters 


cluster.IB <- read.csv("KMeansClusterFinal.csv",header=TRUE)
comparison <- cluster.IB%>%filter(cluster=="1"|cluster=="2")

#demographic cluster data

boxplot.Age <- cluster.IB[, c("cluster", "Age")]
sexbarplot <- cluster.IB[, c("cluster", "Sex")]
boxplot.NOY <- cluster.IB[, c("cluster", "NOY")]
barstast <- cluster.IB[, c("cluster", "Serostatus")]
cn1a<- comparison[, c("cluster", "Serostatus")]
comparison$cluster <- as.factor(comparison$cluster)
comparison$Serostatus <- as.factor(comparison$Serostatus)

cn1a<- barstast[, c("cluster", "Serostatus")]
cn1a$cluster <- as.factor(cn1a$cluster)
cn1a$Serostatus <- as.factor(cn1a$Serostatus)


#need to remove NA's for Cn1A

barstats_clean <- na.omit(barstast)

plot1 <- ggstatsplot::ggbetweenstats(
  data = boxplot.Age,
  x = cluster,
  y = Age,
  color = group,
  title = "Age Box Plot",
  subtitle = "Grouped by cluster", type="nonparametric", comparisons_correction = "holm"
)

plot1


plot2 <- ggstatsplot::ggbetweenstats(
  data = boxplot.NOY,
  x = cluster,
  y = NOY,
  color = group,
  title = "NOY Box Plot",
  subtitle = "Grouped by cluster", type="nonparametric", comparisons_correction = "holm"
)

plot2


cn1aplot <- ggstatsplot::ggbarstats(
  data = barstats_clean,
  x = Serostatus,
  y = cluster,
  title = "",
  subtitle = "Grouped by cluster", type="nonparametric", comparisons_correction = "dunn"
)

cn1aplot


plot3 <- ggstatsplot::ggbarstats(barstats_clean, x = Serostatus, y = cluster) +scale_fill_manual(values=c("black","gray"))+labs(title = "", subtitle = NULL)+
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(size = 0.5),
        axis.text = element_text(family = "serif", size = 12, face = "bold"))

plot3



####comparisons between groups for cn1A

install.packages("dunn.test")
library(dunn.test)


# Create data frames for each pair of groups
pair1 <- data.frame(
  Group = c("Group1", "Group2"),
  Seropositive = c(43, 22),
  Seronegative = c(57, 78)
)

pair2 <- data.frame(
  Group = c("Group1", "Group3"),
  Seropositive = c(43, 35),
  Seronegative = c(57, 65)
)

pair3 <- data.frame(
  Group = c("Group2", "Group3"),
  Seropositive = c(22, 35),
  Seronegative = c(78, 65)
)

# Function to perform chi-squared test for proportions
compare_proportions <- function(pair) {
  chi_squared_result <- chisq.test(pair[, c("Seropositive", "Seronegative")])
  return(chi_squared_result$p.value)
}

# Perform pairwise comparisons
p_value_pair1 <- compare_proportions(pair1)
p_value_pair2 <- compare_proportions(pair2)
p_value_pair3 <- compare_proportions(pair3)

# Print the p-values for each pairwise comparison
print(paste("Group 1 vs. Group 2 p-value:", p_value_pair1))
print(paste("Group 1 vs. Group 3 p-value:", p_value_pair2))
print(paste("Group 2 vs. Group 3 p-value:", p_value_pair3))



#plot this 
# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Create a data frame for the comparisons
comparisons <- data.frame(
  Comparison = c("Group1 vs. Group2", "Group1 vs. Group3", "Group2 vs. Group3"),
  P_Value = c(p_value_pair1, p_value_pair2, p_value_pair3)
)

# Create a grouped bar chart
plot <- ggplot(comparisons, aes(x = Comparison, y = P_Value, fill = Comparison)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = sprintf("p = %.3f", P_Value)), vjust = -0.5) +
  labs(
    title = "Comparison of Serostatus Ratios Between Groups",
    y = "P-Value",
    x = NULL
  ) +
  scale_fill_manual(values = c("Group1 vs. Group2" = "blue", "Group1 vs. Group3" = "green", "Group2 vs. Group3" = "red")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ylim(0, 0.05)  # Set the y-axis limit as needed

# Display the plot
print(plot)



# Calculate the ratio of positive to negative patients for each group
ratio_data <- barstats_clean %>%
  group_by(cluster) %>%
  summarize(Positive_to_Negative_Ratio = sum(Serostatus == "SEROPOSITIVE") / sum(Serostatus == "SERONEGATIVE"))

ratio_data

# Convert cluster to a factor
ratio_data$cluster <- factor(ratio_data$cluster)
ratio_data$Positive_to_Negative_Ratio <- as.numeric(ratio_data$Positive_to_Negative_Ratio)
str(ratio_data)

# Assuming 'Positive_to_Negative_Ratio' and 'cluster' are columns in the 'ratio_data' data frame
dunn_result <- dunn.test(ratio_data$Positive_to_Negative_Ratio ~ ratio_data$cluster, method = "bonferroni")


dunn_result



barstats_clean$cluster <- as.factor(barstats_clean$cluster)
barstats_clean$Serostatus <- as.factor(barstats_clean$Serostatus)

str(barstats_clean)

dunn_result <- dunnTest(Serostatus~ cluster, data = barstats_clean, method = "bonferroni")



seropositive <- data.frame(
 serostatus = c("SEROPOSITIVE", "SERONEGATIVE", "SEROPOSITIVE", "SERONEGATIVE", "SEROPOSITIVE", "SERONEGATIVE"),
  cluster1 = c(43,57),
 cluster2 = c(22,78),
 cluster3=c(35,65))


seropositive <- data.frame(
  clusters = c("cluster1", " cluster2", " cluster3"),
  seropositive = c(43,22,35),
  seronegative = c(16,18,17))

barstats_clean$cluster <- as.factor(barstats_clean$cluster)

# Reshape the data frame to long format
seropositive_long <- reshape2::melt(seropositive, id.vars = "clusters")

seropositive

library(FSA)
library(reshape2)


# Perform Dunn's multiple comparisons test
dunn_result <- dunnTest(value ~ clusters, data = seropositive_long, method = "bonferroni")

# Print the adjusted p-values
print(dunn_result)



# Create the grouped bar plot
plot <- ggplot(ratio_data, aes(x = cluster, y = Positive_to_Negative_Ratio, fill = cluster)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("black", "gray", "gray")) +
  labs(title = "Ratio of Positive to Negative Patients",
       x = "cluster",
       y = "Positive to Negative Ratio") +
  theme_bw()

# Display the plot
plot




plot4 <- ggstatsplot::ggbarstats(sexbarplot, x = Sex, y = cluster,title = "Male vs Female serostatus Percentage")

plot4

# Arrange plots on a grid
demographic <- grid.arrange(plot1, plot2, plot3, plot4, nrow = 2, ncol = 2)



library(xlsx)
write.xlsx(melt_df, "3 cluster_median.xlsx", row.names = FALSE)
write.xlsx(melt_df2, "3 cluster_min.xlsx", row.names = FALSE)
write.xlsx(melt_df3, "3 cluster_max.xlsx", row.names = FALSE)

library(openxlsx)

MTUG <- read.xlsx("clinical data all_de-identified.xlsx", sheet = "mTUG")
QMT <- read.xlsx("clinical data all_de-identified.xlsx", sheet = "QMT add")
EAT10 <- read.xlsx("clinical data all_de-identified.xlsx", sheet = "EAT10")
FRS<- read.xlsx("clinical data all_de-identified.xlsx", sheet = "FRS")
MWT<- read.xlsx("clinical data all_de-identified.xlsx", sheet = "2MWT")
QMTscores<- read.xlsx("clinical data all_de-identified.xlsx", sheet = "QMT scores")
QMTadd <- read.xlsx("clinical data all_de-identified.xlsx", sheet = "QMT add")
NOY <- read.xlsx("clinical data all_de-identified.xlsx", sheet = "NOY")
Age <- read.xlsx("clinical data all_de-identified.xlsx", sheet = "Age")
  
  
boxplot.mTUG <- MTUG[, c("cluster", "mTUG.score")]
boxplot.mTUG$cluster <- factor(boxplot.mTUG$cluster, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))
boxplot.EAT10 <- EAT10[, c("cluster", "EAT10")]
boxplot.EAT10$cluster <- factor(boxplot.EAT10$cluster, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))
boxplot.FRS <- FRS[, c("cluster", "IBM.FRS.Total.Score.")]
boxplot.FRS$cluster <- factor(boxplot.FRS$cluster, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))

boxplot.MWT <- MWT[, c("cluster", "MWT")]
boxplot.MWT$cluster <- factor(boxplot.MWT$cluster, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))


boxplot.QMTadd <- QMTadd[, c("cluster", "average.hand.grip")]
boxplot.QMTadd$cluster <- factor(boxplot.QMTadd$cluster, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))

boxplot.QMTadd2 <- QMT[, c("cluster", "average.knee.extension")]
boxplot.QMTadd2$cluster <- factor(boxplot.QMTadd2$cluster, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))

boxplot.NOY <- NOY[, c("clusterNo", "NOY")]
boxplot.NOY$clusterNo <- factor(boxplot.NOY$clusterNo, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))

boxplot.Age <- Age[, c("clusterNo", "Age")]
boxplot.Age$clusterNo <- factor(boxplot.Age$clusterNo, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))



# Load the dplyr library for data manipulation
library(dplyr)
library(stats)
library(dunn.test)


# Perform Shapiro-Wilk normality test for mTUG scores in each cluster
mtug_shapiro <- boxplot.mTUG %>%
  summarise(
    shapiro_stat = shapiro.test(mTUG.score)$statistic,
    shapiro_p_value = shapiro.test(mTUG.score)$p.value
  )
print(mtug_shapiro)

# Perform Shapiro-Wilk normality test for QMT hand grip scores in each cluster
QMT_hand_shapiro <- boxplot.QMTadd %>%
  summarise(
    shapiro_stat = shapiro.test(average.hand.grip)$statistic,
    shapiro_p_value = shapiro.test(average.hand.grip)$p.value
  )

print(QMT_hand_shapiro)


# Perform Shapiro-Wilk normality test for  average knee extension scores in each cluster
QMT_knee_shapiro <- boxplot.QMTadd2 %>%
  summarise(
    shapiro_stat = shapiro.test(average.knee.extension)$statistic,
    shapiro_p_value = shapiro.test(average.knee.extension)$p.value
  )

print(QMT_knee_shapiro)

# Perform Shapiro-Wilk normality test for EAT10 scores in each cluster
EAT10_shapiro <- boxplot.EAT10 %>%
  summarise(
    shapiro_stat = shapiro.test(EAT10)$statistic,
    shapiro_p_value = shapiro.test(EAT10)$p.value
  )

print(EAT10_shapiro)

# Perform Shapiro-Wilk normality test for EAT10 scores in each cluster
FRS_shapiro <- boxplot.FRS %>%
  summarise(
    shapiro_stat = shapiro.test(IBM.FRS.Total.Score.)$statistic,
    shapiro_p_value = shapiro.test(IBM.FRS.Total.Score.)$p.value
  )

print(FRS_shapiro)

# Perform Shapiro-Wilk normality test for EAT10 scores in each cluster
MWT_shapiro <- boxplot.MWT %>%
  summarise(
    shapiro_stat = shapiro.test(MWT)$statistic,
    shapiro_p_value = shapiro.test(MWT)$p.value
  )

print(MWT_shapiro)

# Perform Shapiro-Wilk normality test for Age scores in each cluster
Age_shapiro <- boxplot.Age %>%
  summarise(
    shapiro_stat = shapiro.test(Age)$statistic,
    shapiro_p_value = shapiro.test(Age)$p.value
  )

print(Age_shapiro)

# Perform Shapiro-Wilk normality test for NOY (disease duration-number of years) scores in each cluster

NOY_shapiro <- boxplot.NOY %>%
  summarise(
    shapiro_stat = shapiro.test(NOY)$statistic,
    shapiro_p_value = shapiro.test(NOY)$p.value
  )

print(NOY_shapiro)


# Perform Kruskal-Wallis test
kruskal_res <- kruskal.test(mTUG.score ~ cluster, data = boxplot.mTUG)
dunn_res <- dunn.test(boxplot.mTUG$mTUG.score, boxplot.mTUG$cluster, method="holm")

Knee_kruskal_res <- kruskal.test(average.knee.extension ~ cluster, data = boxplot.QMTadd2)
Knee_dunn_res <- dunn.test(boxplot.QMTadd2$average.knee.extension, boxplot.QMTadd2$cluster, method="holm")

Eat10_kruskal_res <- kruskal.test(EAT10 ~ cluster, data = boxplot.EAT10)
EAT10_dunn_res <- dunn.test(boxplot.EAT10$EAT10, boxplot.EAT10$cluster, method="holm")

FRS_kruskal_res <- kruskal.test(IBM.FRS.Total.Score. ~ cluster, data = boxplot.FRS)
FRS_dunn_res <- dunn.test(boxplot.FRS$IBM.FRS.Total.Score., boxplot.FRS$cluster, method="holm")

FRS_kruskal_res <- kruskal.test(IBM.FRS.Total.Score. ~ cluster, data = boxplot.FRS)
FRS_dunn_res <- dunn.test(boxplot.FRS$IBM.FRS.Total.Score., boxplot.FRS$cluster, method="holm")

MWT_kruskal_res <- kruskal.test(MWT ~ cluster, data = boxplot.MWT)
MWT_dunn_res <- dunn.test(boxplot.MWT$MWT, boxplot.MWT$cluster, method="holm")

Age_kruskal_res <- kruskal.test(Age ~ clusterNo, data = boxplot.Age)
Age_dunn_res <- dunn.test(boxplot.Age$Age, boxplot.Age$clusterNo, method="holm")

NOY_kruskal_res <- kruskal.test(NOY ~ clusterNo, data = boxplot.NOY)
NOY_dunn_res <- dunn.test(boxplot.NOY$NOY, boxplot.NOY$clusterNo, method="holm")



#two outcome measures passes shapiro-wilk normality test. now we test for homogeneity of variance using levene's test. 
# Conduct Levene's Test for Homogeneity of Variances
library(car)

FRS_levene <- leveneTest(IBM.FRS.Total.Score. ~ cluster, data = boxplot.FRS)
print(FRS_levene)

hand_grip_levene <- leveneTest(average.hand.grip ~ cluster, data = boxplot.QMTadd)
print(hand_grip_levene)

#Levene's test passed for both outcome measures. we can now perform ANOVA 

# Perform ANOVA
FRS_aov_res <- aov(IBM.FRS.Total.Score. ~ factor(cluster), data = boxplot.FRS)
summary(FRS_aov_res)
FRS_Tukey_res <- TukeyHSD(FRS_aov_res)
print(FRS_Tukey_res)

hand_aov_res <- aov(average.hand.grip ~ factor(cluster), data = boxplot.QMTadd)
summary(hand_aov_res)
hand_Tukey_res <- TukeyHSD(hand_aov_res)
print(hand_Tukey_res)



library(ggplot2)

boxplot.QMTadd$cluster <- factor(boxplot.QMTadd$cluster, levels = c(1, 2, 3), labels = c("Cluster 1", "Cluster 2", "Cluster 3"))


knee2 <- ggplot(data = boxplot.QMTadd2, aes(x = cluster, y = average.knee.extension, fill = factor(cluster))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(0, 300, by = 20)) +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("Average Knee Extension"), size = 10)) +
  theme(text = element_text(family = "serif"))

knee2

hand.grip2 <- ggplot(data = boxplot.QMTadd, aes(x = cluster, y = average.hand.grip, fill = factor(cluster))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(0, 300, by = 20)) +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("Average hand grip"), size = 10)) +
  theme(text = element_text(family = "serif"))

hand.grip2


mTUG2 <- ggplot(data = boxplot.mTUG, aes(x = cluster, y = mTUG.score, fill = factor(cluster))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(0, 100, by = 10)) +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("mTUG (seconds)"), size = 10)) +
  theme(text = element_text(family = "serif"))


mTUG2

EAT10 <- ggplot(data = boxplot.EAT10, aes(x = cluster, y = EAT10, fill = factor(cluster))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(0, 40, by = 5)) +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("EAT10 Score"), size = 10)) +
  theme(text = element_text(family = "serif"))

EAT10


FRS2 <- ggplot(data = boxplot.FRS, aes(x = cluster, y = IBM.FRS.Total.Score., fill = factor(cluster))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(20, 40, by = 5), limits = c(20, 40)) + # Explicitly set limits
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("Functional Rating Scale Score"), size = 10)) +
  theme(text = element_text(family = "serif"))

FRS2


MWT2 <- ggplot(data = boxplot.MWT, aes(x = cluster, y = MWT, fill = factor(cluster))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(0, 300, by = 20)) +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("2MWT (seconds)"), size = 10)) +
  theme(text = element_text(family = "serif"))

MWT2


NOY2 <- ggplot(data = boxplot.NOY, aes(x = clusterNo, y = NOY, fill = factor(clusterNo))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(0, 50, by = 5)) +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("Disease Duration(years)"), size = 10)) +
  theme(text = element_text(family = "serif"))

NOY2


Age2 <- ggplot(data = boxplot.Age, aes(x = clusterNo, y = Age, fill = factor(clusterNo))) +
  geom_boxplot(width = 0.3, alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25), alpha = 0.6) +
  scale_fill_manual(values = c("#6699CC", "#CC6666", "#FF9999")) +
  theme_bw(base_size = 12) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.text.y = element_text(family = "serif", face = "bold")) +
  stat_summary(fun = "median", geom = "point", shape = 21, size = 1.5, fill = "black") +
  scale_y_continuous(breaks = seq(0, 100, by = 10)) +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.6, family = "serif", face = "bold", size = 12)) +
  theme(axis.text.y = element_text(angle = 0, vjust = 0.2, family = "serif", face = "bold", size = 12, margin = margin(0, 5, 0, 0))) +
  theme(legend.title = element_blank(), legend.position = 'none') +
  labs(title = "", x = "", y = expression(bold("Age (years)"), size = 10)) +
  theme(text = element_text(family = "serif"))

Age2



# Arrange the plots with equal heights
clinical <- grid.arrange(Age2, NOY2, MWT2, FRS2,  EAT102, mTUG2, hand.grip2, knee2, nrow = 2, ncol = 4)

clinical

facet_grid()







#perform Survival curve on clusters 

install.packages("survival")
install.packages("survminer")

library(survival)
library(survminer)
library(dplyr)

KMCurve <- read.csv("Survival_KM.csv")
KMcurve <- survfit(Surv(Time, Event)~Compare,data=KMCurve)


ggsurvplot(KMcurve)



ggsurvplot(KMcurve, xlim = c(0, 60), break.x.by = 6, ylab = "Survival Probability", 
           xlab = "Time (months)", pval = TRUE, risk.table = TRUE, Risk.table.title = "", 
           legend.labs = c("Cluster 1", "Cluster 2", "Cluster 3"), legend.title = "",
           Surv.curve = "percent", palette = c("blue", "orange", "gray"), 
           title = "Overall Survival", risk.table.height = 0.20)

summary(KMcurve,times = seq(0,60,6))



#re-do with Date of onset 

KMCurve2 <- read.csv("KM_survival_onset.csv")

fit <- survfit(Surv(Time, Event)~1,data=KMCurve2)

KMcurve2 <- survfit(Surv(Time, Event)~Compare,data=KMCurve2)


ggsurvplot(KMcurve2)
ggsurvplot(fit)


ggsurvplot(KMcurve2, xlim = c(0, 400), break.x.by = 50, ylab = "Survival Probability", 
           xlab = "Time (months)", pval = TRUE, risk.table = TRUE, Risk.table.title = "", 
           legend.labs = c("Cluster 1", "Cluster 2", "Cluster 3"), legend.title = "",
           Surv.curve = "percent", palette = c("blue", "orange", "gray"), 
           title = "Overall Survival", risk.table.height = 0.20)

summary(KMcurve2,times = seq(0,400,50))

